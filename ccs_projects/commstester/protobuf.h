/******************************************************************* 
 * Header file generated by Protoc for Embedded C.                 *
 * Version 1.0M4 (2013-03-31)                                      *
 *                                                                 *
 * Copyright (c) 2009-2013                                         *
 * Technische Universitaet Muenchen                                *
 * http://www4.in.tum.de/                                          *
 *                                                                 *
 * Source : Protobuf.proto
 *                                                                 *
 * Do not edit.                                                    *
 *******************************************************************/

#ifndef _Protobuf_H
#define _Protobuf_H

#ifdef __cplusplus
  extern "C" {
#endif


/*******************************************************************
 * General functions
 *******************************************************************/

/*
 * returns the size of a length delimited message which also 
 * contains the first bytes for the length encoding.
 */
unsigned long Message_get_delimited_size(void *_buffer, int offset);

/*
 * Tests whether a message can be completely read from the given buffer at
 * the offset. The bytes [offset..offset+length-1] are interpreted.
 *
 * Returns 1 (true) if buffer[offset..offset+length-1] contains a complete
 * message or 0 (false) otherwise.
 */
int Message_can_read_delimited_from(void *_buffer, int offset, unsigned int length);

/*******************************************************************
 * Message: Protobuf.proto, line 97
 *******************************************************************/

/* Maximum size of a serialized feedback-message, useful for buffer allocation. */
#define MAX_feedback_SIZE 112

/* Structure that holds a deserialized feedback-message. */
struct feedback {
    unsigned long _cmd;
    float _timestamp;
    float _xest;
    float _yest;
    float _zest;
    float _rest;
    float _pest;
    float _hest;
    unsigned long _status;
    float _xdot;
    float _ydot;
    float _zdot;
    float _Ax;
    float _Ay;
    float _Az;
    float _rdot;
    float _pdot;
    float _hdot;
};

/*
 * Serialize a Person-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int feedback_write_delimited_to(struct feedback *_feedback, void *_buffer, int offset);

/*
 * Serialize a Person-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a Person-message is embedded in another message.
 */
int feedback_write_with_tag(struct feedback *_feedback, void *_buffer, int offset, int tag);

/*
 * Deserialize a Person-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _Person will be reset to 0 before _buffer is interpreted.
 */
int feedback_read_delimited_from(void *_buffer, struct feedback *_feedback, int offset);


/*******************************************************************
 * Message: Protobuf.proto, line 121
 *******************************************************************/

/* Maximum size of a serialized all-message, useful for buffer allocation. */
#define MAX_all_SIZE 202

/* Structure that holds a deserialized all-message. */
struct all {
    unsigned long _cmd;
    unsigned long _timestamp;
    float _x;
    float _y;
    float _z;
    float _h;
    float _xactual;
    float _yactual;
    float _zactual;
    float _KPX;
    float _KIX;
    float _KDX;
    float _KPY;
    float _KIY;
    float _KDY;
    float _KPZ;
    float _KIZ;
    float _KDZ;
    float _KPXdot;
    float _KIXdot;
    float _KDXdot;
    float _KPYdot;
    float _KIYdot;
    float _KDYdot;
    float _KPZdot;
    float _KIZdot;
    float _KDZdot;
    float _KPH;
    float _KIH;
    float _KDH;
    float _xdot;
    float _ydot;
    float _zdot;
};

typedef struct all messaging_t; //TODO: If ever regenerate protobuf.h/c, remember to add typedef

/*
 * Serialize a Person-message into the given buffer at offset and return
 * new offset for optional next message.
 */
int all_write_delimited_to(struct all *_all, void *_buffer, int offset);

/*
 * Serialize a Person-message together with its tag into the given buffer 
 * at offset and return new offset for optional next message.
 * Is useful if a Person-message is embedded in another message.
 */
int all_write_with_tag(struct all *_all, void *_buffer, int offset, int tag);

/*
 * Deserialize a Person-message from the given buffer at offset and return
 * new offset for optional next message.
 *
 * Note: All fields in _Person will be reset to 0 before _buffer is interpreted.
 */
int all_read_delimited_from(void *_buffer, struct all *_all, int offset);



#ifdef __cplusplus
  }
#endif

#endif

